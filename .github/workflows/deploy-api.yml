name: Deploy API
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch: {}

concurrency:
  group: deploy-api
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  INSTANCE_ID: i-05100bae19aa8379a

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::397570188272:role/github-oidc-deploy
          aws-region: ${{ env.AWS_REGION }}

      # 0) Quick SSM smoke test so we fail fast if SSM perms/region/instance are wrong
      - name: SSM smoke test
        id: smoke
        run: |
          set -euo pipefail
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands='["set -euxo pipefail","whoami","uname -a","date"]' \
            --query "Command.CommandId" --output text)
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" || true
          STATUS=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'Status' --output text)
          echo "Smoke status: $STATUS"
          echo "::group::SMOKE STDOUT"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'StandardOutputContent' --output text || true
          echo "::endgroup::"
          echo "::group::SMOKE STDERR"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'StandardErrorContent' --output text || true
          echo "::endgroup::"
          test "$STATUS" = "Success"

      # 1) Build the deploy script and base64 it (single-line for safe transport)
      - name: Build deploy script (base64)
        id: pack
        run: |
          cat > deploy.sh <<'EOS'
          set -euo pipefail
          set -x

          REPO_DIR="/home/ec2-user/gameAI"
          sudo mkdir -p "$REPO_DIR"
          sudo chown -R ec2-user:ec2-user "$REPO_DIR"

          # If not a git repo, move aside and clone fresh
          if [ ! -d "$REPO_DIR/.git" ]; then
            if [ "$(ls -A "$REPO_DIR" 2>/dev/null)" ]; then
              mv "$REPO_DIR" "${REPO_DIR}.bak.$(date +%s)"
            fi
            git clone https://github.com/KyleWhite22/GameGeniusAI.git "$REPO_DIR"
          fi

          # Update to main
          git -C "$REPO_DIR" fetch --all
          git -C "$REPO_DIR" reset --hard origin/main

          # Backend path (your repo has /backend at top level)
          cd "$REPO_DIR/backend"

          # Tooling info
          node -v || true
          npm -v || true
          pm2 -v || true
          which pm2 || true

          # Install deps
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

          # Start/reload with PM2
          APP="server.js"; [ -f dist/server.js ] && APP="dist/server.js"
          if pm2 describe gamegenius >/dev/null 2>&1; then
            pm2 reload gamegenius --update-env
          else
            pm2 start "$APP" --name gamegenius
          fi
          pm2 save

          # Health check with retries
          for i in $(seq 1 20); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000/health || true)
            echo "Health attempt $i -> $code"
            [ "$code" = "200" ] && exit 0
            sleep 1
          done

          echo "Health FAILED; last PM2 logs:"
          sudo -iu ec2-user bash -lc "pm2 logs gamegenius --lines 120 || true"
          exit 1
          EOS

          # Produce a single-line base64 (GNU and BSD compatible)
          B64=$(base64 -w0 < deploy.sh 2>/dev/null || base64 -b 0 < deploy.sh)
          echo "b64=$B64" >> "$GITHUB_OUTPUT"

      # 2) Ship it to the instance and run it
      - name: Send via SSM and wait
        id: ssm
        run: |
          set -euo pipefail
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "GameGeniusAI API deploy" \
            --parameters commands="[
              \"set -euxo pipefail\",
              \"printf '%s' '${{ steps.pack.outputs.b64 }}' | base64 -d >/root/deploy.sh\",
              \"bash /root/deploy.sh\"
            ]" \
            --query "Command.CommandId" --output text)

          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" || true
          STATUS=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'Status' --output text)
          echo "Status: $STATUS"

          echo "::group::STDOUT"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'StandardOutputContent' --output text || true
          echo "::endgroup::"

          echo "::group::STDERR"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ env.INSTANCE_ID }}" --query 'StandardErrorContent' --output text || true
          echo "::endgroup::"

          test "$STATUS" = "Success"

      # 3) Quick check through Nginx/HTTPS
      - name: Verify over HTTPS via Nginx
        run: curl -sSfI https://api.kyle-white.com/health
